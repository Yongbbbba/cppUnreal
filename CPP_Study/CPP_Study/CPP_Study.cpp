#include <iostream>
using namespace std;

// 오늘의 주제 : 타입 변환 

// malloc -> void*을 반환하고, 이를 우리가 (타입 변환)을 통해 사용했었음

class Knight
{
public:
	int _hp = 10;
};

class Dog
{
public:
	// 타입 변환 생성자
	Dog(const Knight& knight)
	{
		_age = knight._hp;
	}

public:
	int _age = 1;
	int _cuteness = 2;
};

int main()
{
	// ---------------- 타입 변환 유형 (비트열 재구성 여부) --------------
	// [1] 값 타입 변환
	// 	특징) 의미를 유지하기 위해서, 윈본 객체와 다른 비트열 재구성
	{
		int a = 123456789;  // 2의 보수
		float b = (float)a;  // 부동소수점(지수 + 유효숫자)
		cout << b << endl;

	}

	// [2] 참조 타입 변환
	// 특징) 비트열을 재구성하지 않고, '관점'만 바꾸는 것
	// 거의 쓸 일은 없지만, 포인터 타입 변환도 '참조 타입 변환'과 동일한 룰을 따르니까 일석이조로 공부하자!
	{
		int a = 123456789;  // 2의 보수
		float b = (float&)a;  // 부동소수점(지수 + 유효숫자)
		cout << b << endl;
	}
	// ----------------안전도 분류 --------------

	// [1] 안전한 변환
	// 특징) 의미가 항상 100% 완전히 일치하는 경우 - > 데이터 손실이 없음 
	// 	   같은 타입이면서 크기만 더 큰 바구니로 이동
	// 	   작은 바구니 -> 큰 바구니로 이동 OK (업캐스팅)
	// 	    ex) char -> short, short -> int, int -> _int64
	{
		int a = 123456789;
		__int64 b = a;
		cout << b << endl;  // 데이터 손실이 없음 
	}
	// [2] 불안전한 변환
	// 특징) 의미가 항상 100% 일치한다고 보장하지 못하는 경우
	// 타입이 다르거나
	// 같은 타입이지만 큰 바구니 -> 작은 바구니 이동(다운캐스팅)  -> 데이터 손실 발생
	{
		int a = 123456789;
		float b = a;
		short c = a;
		cout << b << endl;
		cout << c << endl;
	}

	// ----------------프로그래머 의도에 따라 분류 --------------
	// [1] 암시적 변환
	// 특징 ) 이미 알려진 타입 변환 규칙에 따라서 컴파일러가 '자동'으로 타입 변환
	{
		int a = 123456789;
		float b = a;  // 암시적으로 변환
		cout << b << endl; // 에러는 안나도 warning은 일어날 수 있음. 컴파일러 설정에 따라 에러로 만들 수도 있다
	}
	// [2] 명시적 변환
	{
		int a = 123456789;
		int* b = (int*)a;   // 명시적
		cout << hex << a << endl;
		cout << b << endl;
	}
	// ---------------- 아무런 연관 관계가 없는 클래스 사이의 변환 --------------

	// [1] 연관없는 클래스 사이의 '값 타입' 변환
	// 특징) 일반적으로 안 됨 ()
	{
		Knight knight;
		Dog dog = (Dog)knight;   // 연관없는 클래스 사이의 말이 안되는 형변환, 하지만 타입 변환 생성자를 넣어주면 가능은하다
	}


	return 0;
}