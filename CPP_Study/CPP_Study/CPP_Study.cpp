#include <iostream>

using namespace std;

// 오늘의 주제 : 문자와 문자열
// char은 그냥 정수지만 '문자'의미를 나타내기 위해 사용

// char : 알파벳 / 숫자 문자 등을 나타낸다 
// wchar_t : 유니코드 문자를 나타낸다

// '문자' 의미로 작은 따옴표 '' 사용
char ch = 97;  // 'a'
char ch2 = 'a' + 1;

// 국제화 시대에는 영어만으로 서비스 할 수 없음 -> 아스키 코드만으로는 불가능
// 전 세계 모든 문자에 대해 유일 코드를 부여해야함 -> 유니코드 (unicode)의 등장
// 참고) 유니코드에서 가장 많은 번호를 차지하는게 한국어/중국어
// 유니코드는 표기 방식이 여러가지가 있는데 대표적으로 UTF8 UTF16을 가장 많이 사용
// UTF8
// - 알파벳, 숫자 1바이트 (아스키 동일한 번호)
// - 유럽 지역의 문자는 2바이트 
// - 한글, 한자 등 3바이트
// UTF16
// - 알파벳, 숫자, 한글, 한자 등 거의 대부분 문자 2바이트
// - 매우 예외적인 고대 문자만 4바이트(사실상 무시해도 됨)

wchar_t wch = L'안';  // 유니코드라는 것을 명시하기 위하여 L을 앞에 붙여준다

// Escape Sequence
// 표기하기 애매한 애들을 표현
// \t = 아스키코드9 = Tab
// \n = 아스키코드10 = LIneFeed (한 줄 아래로)
// \r = 아스키코드13 = CarriageReturn (커서 <<) 
// \0  = 아스키코드0 - NULL

	char str[] = { 'h','e','l' };  // 데이터 영역은 이미 대부분 0으로 초기화되어 있음. 그래서 main에서 출력을 하면 잘 출력이 되는데 이걸 스택에다가 선언해서 출력하면 0을 만날 때까지 출력하기 떄문에 원하는 결과가 나오지 않는다 
	char str2[] = "hello World";  // 맨 뒤에 \0이 추가 되어있음

int main()
{
	//cout << ch << endl;
	//cout << ch2 << endl;
	//cout << wch << endl;  // cout은 char형 전용 
	//
	//wcout.imbue(locale("kor"));  // 한국어 인식을 위해서 처리해줘야함 
	//wcout << wch << endl;

	cout << str << endl;
}

